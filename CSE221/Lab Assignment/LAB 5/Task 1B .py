# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHfkgs4x6EuIIjlB_xkHVts_7jVty7tB
"""

#Task 1
# B) Solve it using the BFS approach.


def read_input(input_file):
    with open(input_file, 'r') as file:
        N, M = map(int, file.readline().split())
        prerequisites = [tuple(map(int, file.readline().split())) for _ in range(M)]
    return N, prerequisites

input_file = "input1b.txt"
N, prerequisites = read_input(input_file)

from collections import deque

def bfs_order(N, prerequisites):
    graph = {i: [] for i in range(1, N+1)}
    in_degree = {i: 0 for i in range(1, N+1)}
    for A, B in prerequisites:
        graph[A].append(B)
        in_degree[B] += 1
    queue = deque()
    result = []

    for i in range(1, N+1):
        if in_degree[i] == 0:
            queue.append(i)

    while queue:
        course = queue.popleft()
        result.append(course)
        for neighbor in graph[course]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)

    return result if len(result) == N else None

order_bfs = bfs_order(N, prerequisites)

output_files = "output1b.txt"
with open(output_files, 'w') as output_file:
    output_file.write(str(order_bfs) if order_bfs else "IMPOSSIBLE")