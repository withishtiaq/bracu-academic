# -*- coding: utf-8 -*-
"""Untitled18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YEiAwmE-dJsIOXbwDGMQs7O5YNpNaaR_
"""

#Task 03

def merge_and_count(left, right):
    result = []
    i = j = inversions = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
            inversions += len(left) - i
    result += left[i:]
    result += right[j:]
    return result, inversions

def merge_sort_and_count(arr):
    if len(arr) <= 1:
        return arr, 0
    mid = len(arr) // 2
    left, left_inversions = merge_sort_and_count(arr[:mid])
    right, right_inversions = merge_sort_and_count(arr[mid:])
    merged, merge_inversions = merge_and_count(left, right)
    return merged, left_inversions + right_inversions + merge_inversions

inp = open("input3.txt", "r")
oup = open("output3.txt", "w")

n = int(inp.readline())
heights = list(map(int, inp.readline().split()))

_, inversions = merge_sort_and_count(heights)
oup.write(str(inversions))

print(".")

inp.close()
oup.close()