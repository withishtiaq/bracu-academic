# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHfkgs4x6EuIIjlB_xkHVts_7jVty7tB
"""

#Task 2

from collections import defaultdict, deque

def lexicographically_smallest_order(N, prerequisites):
    graph = defaultdict(list)
    in_degree = [0] * (N + 1)

    for A, B in prerequisites:
        graph[A].append(B)
        in_degree[B] += 1

    queue = deque()
    result = []

    for i in range(1, N + 1):
        if in_degree[i] == 0:
            queue.append(i)

    while queue:
        current_course = queue.popleft()
        result.append(current_course)

        for neighbor in graph[current_course]:
            in_degree[neighbor] -= 1
            if in_degree[neighbor] == 0:
                queue.append(neighbor)

    return result if len(result) == N else None

def main():
    input_file = "input2.txt"
    output_files = "output2.txt"

    with open(input_file, 'r') as file:
        N, M = map(int, file.readline().split())
        prerequisites = [tuple(map(int, file.readline().split())) for _ in range(M)]

    order = lexicographically_smallest_order(N, prerequisites)

    with open(output_files, 'w') as output_file:
        if order:
            output_file.write(" ".join(map(str, order)))
        else:
            output_file.write("IMPOSSIBLE")

if __name__ == "__main__":
    main()