# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHfkgs4x6EuIIjlB_xkHVts_7jVty7tB
"""

#Task 3


def dfs_stack(graph, vertex, visited, stack):
    visited[vertex] = True
    for neighbor in graph[vertex]:
        if not visited[neighbor]:
            dfs_stack(graph, neighbor, visited, stack)
    stack.append(vertex)

def fill_stack(graph, n):
    stack = []
    visited = [False] * (n + 1)
    for vertex in range(1, n + 1):
        if not visited[vertex]:
            dfs_stack(graph, vertex, visited, stack)
    return stack


def dfs_scc(graph, vertex, visited, scc):
    visited[vertex] = True
    scc.append(vertex)
    for neighbor in graph[vertex]:
        if not visited[neighbor]:
            dfs_scc(graph, neighbor, visited, scc)

def find_scc(graph, n, stack):
    scc_list = []
    visited = [False] * (n + 1)
    while stack:
        vertex = stack.pop()
        if not visited[vertex]:
            scc = []
            dfs_scc(graph, vertex, visited, scc)
            scc_list.append(scc)
    return scc_list


def main():
    input_file = "input3.txt"
    output_files = "output3.txt"

    with open(input_file, 'r') as file:
        N, M = map(int, file.readline().split())

        graph = {i: [] for i in range(1, N + 1)}

        for _ in range(M):
            u, v = map(int, file.readline().split())
            graph[u].append(v)
    stack = fill_stack(graph, N)

    scc_components = find_scc(graph, N, stack)

    with open(output_files, 'w') as output_file:
        for scc in scc_components:
            output_file.write(" ".join(map(str, scc)) + "\n")

if __name__ == "__main__":
    main()