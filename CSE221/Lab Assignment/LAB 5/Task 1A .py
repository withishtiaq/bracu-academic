# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZHfkgs4x6EuIIjlB_xkHVts_7jVty7tB
"""

#Task 1
# A) Solve it using the DFS approach.

def read_input(input_file):
    with open(input_file, 'r') as file:
        N, M = map(int, file.readline().split())
        prerequisites = [tuple(map(int, file.readline().split())) for _ in range(M)]
    return N, prerequisites

input_file = "input1a.txt"
N, prerequisites = read_input(input_file)

def dfs(course, graph, visited, stack, recursion_stack):
    visited[course] = True
    recursion_stack[course] = True

    for neighbor in graph[course]:
        if not visited[neighbor]:
            if dfs(neighbor, graph, visited, stack, recursion_stack):
                return True
        elif recursion_stack[neighbor]:
            return True

    recursion_stack[course] = False
    stack.append(course)
    return False

def dfs_order(N, prerequisites):
    graph = {i: [] for i in range(1, N+1)}
    for A, B in prerequisites:
        graph[A].append(B)

    visited = [False] * (N+1)
    recursion_stack = [False] * (N+1)
    stack = []

    for i in range(1, N+1):
        if not visited[i]:
            if dfs(i, graph, visited, stack, recursion_stack):
                return None
    return stack[::-1]

order_dfs = dfs_order(N, prerequisites)

output_files = "output1a.txt"
with open(output_files, 'w') as output_file:
    output_file.write(str(order_dfs) if order_dfs else "IMPOSSIBLE")